{"version":3,"file":"differenceequationsignal1d.umd.js","sources":["../src/DifferenceEquationSignal1D.js","../src/main.js"],"sourcesContent":["/*\n* Author    Jonathan Lurie - http://me.jonathanlurie.fr\n* License   MIT\n* Link      https://github.com/jonathanlurie/differenceequationsignal1d\n* Lab       MCIN - http://mcin.ca/ - Montreal Neurological Institute\n*/\n\n\nclass DifferenceEquationSignal1D {\n\n  constructor() {\n    this._inputSignal = null;\n    this._outputSignal = null;\n    this._aCoefficients = null;\n    this._bCoefficients = null;\n    this._enableBackwardSecondPass = false;\n  }\n  \n  \n  /**\n  * Set the input signal. Will also reset the output to null.\n  * @param {Float32Array} signal - the signal\n  */\n  setInput( signal ){\n    this._outputSignal = null;\n    this._inputSignal = signal;\n  }\n  \n  \n  /**\n  * Set the array of 'a' coefficients. Must be padded by an additional \"1.0\" because\n  * this set of coefficient will be addressed at it index \"1\" ( and not \"0\")\n  * @param {Float32Array|Array} a - the 'a' coeficients\n  */\n  setACoefficients( a ){\n    this._aCoefficients = a;\n  }\n  \n  \n  /**\n  * Set the array of 'b' coefficients\n  * @param {Float32Array|Array} b - the 'b' coeficients\n  */\n  setBCoefficients( b ){\n    this._bCoefficients = b;\n  }\n  \n  \n  /**\n  * Get the output signal\n  * @return {Float32Array} the filtered signal\n  */\n  getOutput(){\n    return this._outputSignal;\n  }\n\n\n  /**\n  * Will process the signal backwards as a second pass, using the same coeficients.\n  * This is to make sure the output remain in phase with the input\n  */\n  enableBackwardSecondPass(){\n    this._enableBackwardSecondPass = true;\n  }\n\n  \n  /**\n  * Will not process the signal backwards as a second pass.\n  * Depending on the coefficients, the output may not be in phase with the input.\n  */\n  disableBackwardSecondPass(){\n    this._enableBackwardSecondPass = false;\n  }\n\n\n  /**\n  * Launch the filtering. In the end, get the output using the method `.getOutput()`\n  */\n  run(){\n    var that = this;\n    var out = new Float32Array( this._inputSignal.length ).fill(0);\n    \n    // some shortcuts\n    var x = this._inputSignal;\n    var y = out;\n    var b = this._bCoefficients;\n    var a = this._aCoefficients;\n    var M = b.length - 1;\n    var N = a.length - 1;\n    \n    function getOutputAt( n ){\n      var coef = \"\";\n      \n      // sum of the x\n      let xSum = 0;\n      for(var i=0; i<=M; i++){\n        var safeSignaValue = (i>n)? 0 : x[n-i];\n        xSum += b[i] * safeSignaValue;\n      }\n      \n      // sum of the y \n      let ySum = 0;\n      for(var j=1; j<=N; j++){\n        var safeSignaValue = (j>n)? 0 : y[n-j];\n        ySum += a[j] * safeSignaValue;\n      }\n\n      var valueAtN = xSum - ySum;\n      return valueAtN;\n    }\n    \n    for(var i=0; i<out.length; i++){\n      out[i] = getOutputAt(i);\n    }\n    \n    if( this._enableBackwardSecondPass ){\n      out.reverse();\n      x = out;\n      out = new Float32Array( this._inputSignal.length ).fill(0);\n      y = out;\n      \n      for(var i=0; i<out.length; i++){\n        out[i] = getOutputAt(i);\n      }\n      out.reverse();\n    }\n    \n    this._outputSignal = out;\n  }\n  \n\n} /* END of class DifferenceEquationSignal1D */\n\nexport { DifferenceEquationSignal1D };\n","// if we wanted to use foo here:\n//import foo from './foo.js';\n\n// but we just want to make it accessible:\nexport { DifferenceEquationSignal1D } from './DifferenceEquationSignal1D.js'; \n"],"names":["DifferenceEquationSignal1D","_inputSignal","_outputSignal","_aCoefficients","_bCoefficients","_enableBackwardSecondPass","signal","a","b","out","Float32Array","length","fill","x","y","M","N","getOutputAt","n","xSum","i","safeSignaValue","ySum","j","valueAtN","reverse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAAA;;;;;;;MAQMA;EAEJ,wCAAc;EAAA;;EACZ,SAAKC,YAAL,GAAoB,IAApB;EACA,SAAKC,aAAL,GAAqB,IAArB;EACA,SAAKC,cAAL,GAAsB,IAAtB;EACA,SAAKC,cAAL,GAAsB,IAAtB;EACA,SAAKC,yBAAL,GAAiC,KAAjC;EACD;;EAGD;;;;;;;;+BAIUC,QAAQ;EAChB,WAAKJ,aAAL,GAAqB,IAArB;EACA,WAAKD,YAAL,GAAoBK,MAApB;EACD;;EAGD;;;;;;;;uCAKkBC,GAAG;EACnB,WAAKJ,cAAL,GAAsBI,CAAtB;EACD;;EAGD;;;;;;;uCAIkBC,GAAG;EACnB,WAAKJ,cAAL,GAAsBI,CAAtB;EACD;;EAGD;;;;;;;kCAIW;EACT,aAAO,KAAKN,aAAZ;EACD;;EAGD;;;;;;;iDAI0B;EACxB,WAAKG,yBAAL,GAAiC,IAAjC;EACD;;EAGD;;;;;;;kDAI2B;EACzB,WAAKA,yBAAL,GAAiC,KAAjC;EACD;;EAGD;;;;;;4BAGK;AACH,EACA,UAAII,MAAM,IAAIC,YAAJ,CAAkB,KAAKT,YAAL,CAAkBU,MAApC,EAA6CC,IAA7C,CAAkD,CAAlD,CAAV;;EAEA;EACA,UAAIC,IAAI,KAAKZ,YAAb;EACA,UAAIa,IAAIL,GAAR;EACA,UAAID,IAAI,KAAKJ,cAAb;EACA,UAAIG,IAAI,KAAKJ,cAAb;EACA,UAAIY,IAAIP,EAAEG,MAAF,GAAW,CAAnB;EACA,UAAIK,IAAIT,EAAEI,MAAF,GAAW,CAAnB;;EAEA,eAASM,WAAT,CAAsBC,CAAtB,EAAyB;AACvB;EAEA;EACA,YAAIC,OAAO,CAAX;EACA,aAAI,IAAIC,IAAE,CAAV,EAAaA,KAAGL,CAAhB,EAAmBK,GAAnB,EAAuB;EACrB,cAAIC,iBAAkBD,IAAEF,CAAH,GAAO,CAAP,GAAWL,EAAEK,IAAEE,CAAJ,CAAhC;EACAD,kBAAQX,EAAEY,CAAF,IAAOC,cAAf;EACD;;EAED;EACA,YAAIC,OAAO,CAAX;EACA,aAAI,IAAIC,IAAE,CAAV,EAAaA,KAAGP,CAAhB,EAAmBO,GAAnB,EAAuB;EACrB,cAAIF,iBAAkBE,IAAEL,CAAH,GAAO,CAAP,GAAWJ,EAAEI,IAAEK,CAAJ,CAAhC;EACAD,kBAAQf,EAAEgB,CAAF,IAAOF,cAAf;EACD;;EAED,YAAIG,WAAWL,OAAOG,IAAtB;EACA,eAAOE,QAAP;EACD;;EAED,WAAI,IAAIJ,IAAE,CAAV,EAAaA,IAAEX,IAAIE,MAAnB,EAA2BS,GAA3B,EAA+B;EAC7BX,YAAIW,CAAJ,IAASH,YAAYG,CAAZ,CAAT;EACD;;EAED,UAAI,KAAKf,yBAAT,EAAoC;EAClCI,YAAIgB,OAAJ;EACAZ,YAAIJ,GAAJ;EACAA,cAAM,IAAIC,YAAJ,CAAkB,KAAKT,YAAL,CAAkBU,MAApC,EAA6CC,IAA7C,CAAkD,CAAlD,CAAN;EACAE,YAAIL,GAAJ;;EAEA,aAAI,IAAIW,IAAE,CAAV,EAAaA,IAAEX,IAAIE,MAAnB,EAA2BS,GAA3B,EAA+B;EAC7BX,cAAIW,CAAJ,IAASH,YAAYG,CAAZ,CAAT;EACD;EACDX,YAAIgB,OAAJ;EACD;;EAED,WAAKvB,aAAL,GAAqBO,GAArB;EACD;;;;;EChIH;;;;;;;;;;;;"}